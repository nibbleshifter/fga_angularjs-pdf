/* fga_Angular-PDF Version: 0.4.0 
 * Based on the work by Sayanee Basu 2014, released under an MIT license 
 * Modified by FGA 2015 
 */
angular.module("pdf",[]),function(){"use strict";function ngPdfDirective($window,$rootScope){function ngPdfLink(scope,element,attrs){var url=scope.pdfUrl,pdfDoc=null,pageNum=attrs.page?attrs.page:1,scale=.6,//attrs.scale > 0 ? attrs.scale : 1,
canvas=attrs.canvasid?document.getElementById(attrs.canvasid):document.getElementById("pdf-canvas"),ctx=canvas.getContext("2d"),windowEl=angular.element($window);windowEl.on("scroll",function(){scope.$apply(function(){scope.scroll=windowEl[0].scrollY})}),PDFJS.disableWorker=!0,scope.pageNum=pageNum,scope.renderPage=function(num){pdfDoc.getPage(num).then(function(page){var viewport,renderContext={};/*  if (attrs.scale === 'page-fit') {
						viewport = page.getViewport(1);
						pageWidthScale = element[0].clientWidth / viewport.width;
						pageHeightScale = element[0].clientHeight / viewport.height;
						scale = Math.min(pageWidthScale, pageHeightScale);
					  } else {*/
viewport=page.getViewport(scale),
//}
canvas.height=viewport.height,canvas.width=viewport.width,renderContext={canvasContext:ctx,viewport:viewport},page.render(renderContext).promise.then(function(){"function"==typeof scope.onPageRender&&scope.onPageRender()})})},
//make it possible to receive events from other directives and controllers to change page and zoom
scope.$on("pdf.nextPage",function(event){scope.goNext()}),scope.$on("pdf.previousPage",function(event){scope.goPrevious()}),scope.$on("pdf.zoomIn",function(event){scope.zoomIn()}),scope.$on("pdf.zoomOut",function(event){scope.zoomOut()}),scope.goPrevious=function(){scope.pageToDisplay<=1||(scope.pageNum=parseInt(scope.pageNum)-1)},scope.goNext=function(){scope.pageToDisplay>=pdfDoc.numPages||(scope.pageNum=parseInt(scope.pageNum)+1)},scope.zoomIn=function(){return 2>scale&&(scale=parseFloat(scale)+.2,scope.renderPage(scope.pageToDisplay)),scale},scope.zoomOut=function(){return scale>.4&&(scale=parseFloat(scale)-.2,scope.renderPage(scope.pageToDisplay)),scale},scope.changePage=function(){scope.renderPage(scope.pageToDisplay)},scope.rotate=function(){"rotate0"===canvas.getAttribute("class")?canvas.setAttribute("class","rotate90"):"rotate90"===canvas.getAttribute("class")?canvas.setAttribute("class","rotate180"):"rotate180"===canvas.getAttribute("class")?canvas.setAttribute("class","rotate270"):canvas.setAttribute("class","rotate0")},PDFJS.getDocument(url,null,null,scope.onProgress).then(function(_pdfDoc){"function"==typeof scope.onLoad&&scope.onLoad(),pdfDoc=_pdfDoc,scope.renderPage(scope.pageToDisplay),scope.$apply(function(){scope.pageCount=_pdfDoc.numPages})},function(error){error&&"function"==typeof scope.onError&&scope.onError(error)}),scope.$watch("pageNum",function(newVal){scope.pageToDisplay=parseInt(newVal),null!==pdfDoc&&scope.renderPage(scope.pageToDisplay)})}return{restrict:"E",templateUrl:function(element,attr){return attr.templateUrl?attr.templateUrl:"partials/viewer.html"},link:ngPdfLink}}angular.module("pdf").directive("ngPdf",ngPdfDirective)}();